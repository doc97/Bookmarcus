/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */


apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

configurations {
    driver
}

dependencies {
    compile group:'org.xerial', name:'sqlite-jdbc', version:'3.8.11.2'
    driver 'org.xerial:sqlite-jdbc:3.20.1'
    testCompile 'info.cukes:cucumber-java:1.2.5'
    testCompile 'info.cukes:cucumber-junit:1.2.5'
    testCompile 'junit:junit:4.12'
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

mainClassName = 'main.Main'

jar {
    manifest {
        attributes 'Main-Class': 'main.Main'
    }
}

run {
    standardInput = System.in
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file -> loader.addURL(file.toURI().toURL())}

task createDB {

    ext.loadScript = { sql, file ->
        println("Applying " + file)
        String[] sqlcmds = file.text.split(";")
        sqlcmds.collect{it.trim()}.findAll{!it.isEmpty() && !it.startsWith("--")}.each{
            try {
                sql.execute(it)
            } catch(java.sql.SQLException e) {
                System.err << "Invalid SQL statement: " + it
                e.printStackTrace(System.err)
                throw e
            }
        }
    }
    try {
    mkdir "$projectDir/sql/db"
        def sql = groovy.sql.Sql.newInstance('jdbc:sqlite:sql/db/Bookmarcus.db','','','org.sqlite.JDBC')
        new File("$projectDir/sql/").eachFileMatch(~/.*init.sql/) {loadScript(sql, it)}
        new File("$projectDir/sql/").eachFileMatch(~/.*\.sql/) {loadScript(sql, it)}
        sql.close()
    } catch(java.sql.SQLException e) {
        System.err << "Invalid SQL statement: " + it
        e.printStackTrace(System.err)
        
    }
}
